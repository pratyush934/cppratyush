#include<bits/stdc++.h>
using namespace std;

#define int long long
struct hasher{
    int base,mod;
    vector<int> hash,basepow;
    hasher(){

    }
    hasher(string s, int _base,int _mod){
        base = _base;mod = _mod;    
        int n = s.length();
        hash.resize(n+1);basepow.resize(n+1);
        hash[0] = 0; basepow[0] = 1;
        for(int i=1;i<=n;i++){
            hash[i] = hash[i-1] * base + (s[i-1]-'a'+1) % mod;
            basepow[i] = basepow[i-1] * base % mod;
        }
    }
    int gethash(int l,int r){// 0 indexed ... in O(1).
        int ans =  (hash[r+1] - hash[l] * basepow[r-l+1])%mod;
        return (ans + mod)%mod;
    } 
};

struct doublehasher{
    hasher h1,h2;
    doublehasher(string s){
        h1 = hasher(s,37,999999929);
        h2 = hasher(s,41,999999937);
    }
    pair<int,int> gethash(int l,int r){
        return {h1.gethash(l,r), h2.gethash(l,r)};
    }
};

signed main(){
    string s;
    cin>>s;
    int n = s.length();
    doublehasher shash(s);
    for(int len=1;len<n;len++){
        if(shash.gethash(0,len-1) == shash.gethash(n-len,n-1)){
            cout<<len<<" ";
        }
    }
}
